{"version":3,"sources":["service/CourseDataService.js","component/ListCoursesComponent.jsx","component/CourseComponent.jsx","component/InstructorApp.jsx","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","name","axios","get","id","delete","course","put","post","ListCoursesComponent","props","state","courses","message","deleteCourseClicked","bind","updateCourseClicked","addCourseClicked","refreshCourses","this","CourseDataService","retrieveAllCourses","then","response","console","log","setState","data","deleteCourse","history","push","className","style","marginLeft","color","class","striped","bordered","hover","variant","map","key","description","onClick","backgroundColor","Component","CourseComponent","match","params","onSubmit","validate","retrieveCourse","values","errors","length","createCourse","updateCourse","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","type","disabled","InstructorApp","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.186397e2.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst INSTRUCTOR = 'muskan';\r\nconst COURSE_API_URL = 'http://localhost:8080';\r\nconst INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\r\n\r\nclass CourseDataService {\r\n\r\n    retrieveAllCourses(name) {\r\n        return axios.get(`${INSTRUCTOR_API_URL}/courses`);\r\n    }\r\n\r\n    retrieveCourse(name, id) {\r\n        //console.log('executed service')\r\n        return axios.get(`${INSTRUCTOR_API_URL}/courses/${id}`);\r\n    }\r\n\r\n    deleteCourse(name, id) {\r\n        //console.log('executed service')\r\n        return axios.delete(`${INSTRUCTOR_API_URL}/courses/${id}`);\r\n    }\r\n\r\n    updateCourse(name, id, course) {\r\n        //console.log('executed service')\r\n        return axios.put(`${INSTRUCTOR_API_URL}/courses/${id}`, course);\r\n    }\r\n\r\n    createCourse(name, course) {\r\n        //console.log('executed service')\r\n        return axios.post(`${INSTRUCTOR_API_URL}/courses/`, course);\r\n    }\r\n}\r\n\r\nexport default new CourseDataService()\r\n","import React, { Component } from 'react';\r\nimport CourseDataService from '../service/CourseDataService'\r\n\r\nconst INSTRUCTOR='muskan'\r\n\r\nclass ListCoursesComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            courses:[],\r\n            message: null\r\n        }\r\n        this.deleteCourseClicked = this.deleteCourseClicked.bind(this)\r\n        this.updateCourseClicked = this.updateCourseClicked.bind(this)\r\n        this.addCourseClicked = this.addCourseClicked.bind(this)\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshCourses();\r\n    }\r\n\r\n    refreshCourses() {\r\n        CourseDataService.retrieveAllCourses(INSTRUCTOR)\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({courses: response.data})\r\n                }\r\n            )\r\n    }\r\n\r\n    deleteCourseClicked(id) {\r\n        CourseDataService.deleteCourse(INSTRUCTOR, id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of course ${id} Successful` })\r\n                    this.refreshCourses()\r\n                }\r\n            )\r\n    }\r\n\r\n    addCourseClicked() {\r\n        this.props.history.push(`/courses/-1`)\r\n    }\r\n\r\n    updateCourseClicked(id) {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/courses/${id}`)\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        return (\r\n            <div className=\"container\" style={{marginLeft:\"20px\"}}>\r\n                <h3 style={{color:\"grey\"}}>ALL COURSES</h3>\r\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">                   \r\n                    <table className=\"table\" striped bordered hover variant=\"dark\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Description</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                                this.state.courses.map(\r\n                                    course =>\r\n                                        <tr key={course.id}>\r\n                                            <td>{course.id}</td>\r\n                                            <td>{course.description}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateCourseClicked(course.id)} style={{backgroundColor:\"grey\", color:\"white\"}}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteCourseClicked(course.id)} style={{backgroundColor:\"light grey\", color:\"black\"}}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"row\">\r\n                    <button className=\"btn btn-success\" onClick={this.addCourseClicked} style={{backgroundColor:\"green\", color:\"white\"}}>Add</button>  \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCoursesComponent\r\n","import React, {Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport CourseDataService from '../service/CourseDataService';\r\n\r\nconst INSTRUCTOR = 'muskan'\r\n\r\nclass CourseComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description:''\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(this.state.id)\r\n\r\n        // eslint-disable-next-line\r\n        if (this.state.id == -1) {\r\n            return\r\n        }\r\n\r\n        CourseDataService.retrieveCourse(INSTRUCTOR, this.state.id)\r\n            .then(response => this.setState({\r\n                description: response.data.description\r\n            }))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = 'Enter a Description'\r\n        } else if (values.description.length < 5) {\r\n            errors.description = 'Enter atleast 5 Characters in Description'\r\n        }\r\n\r\n        return errors\r\n\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let username = INSTRUCTOR\r\n\r\n        let course = {\r\n            id: this.state.id,\r\n            description: values.description\r\n        }\r\n\r\n        if (this.state.id === -1) {\r\n            CourseDataService.createCourse(username, course)\r\n                .then(() => this.props.history.push('/courses'))\r\n        } else {\r\n            CourseDataService.updateCourse(username, this.state.id, course)\r\n                .then(() => this.props.history.push('/courses'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    render(){\r\n\r\n        let{ description, id } = this.state\r\n\r\n        return(\r\n            <div>\r\n                <h3>Course</h3>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ id, description }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Id</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CourseComponent","import React, { Component } from 'react';\r\nimport ListCoursesComponent from './ListCoursesComponent';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport CourseComponent from './CourseComponent';\r\n\r\nclass InstructorApp extends Component {\r\n    render() {\r\n        return (<Router>\r\n            <>\r\n                <h1 style={{color:\"blue\", backgroundColor: \"Lightblue\", marginLeft:\"20px\"}}>Courses Application!</h1>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={ListCoursesComponent} />\r\n                    <Route path=\"/courses\" exact component={ListCoursesComponent} />\r\n                    <Route path=\"/courses/:id\" component={CourseComponent} />\r\n                </Switch>\r\n            </>\r\n        </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InstructorApp","import React, { Component } from 'react';\nimport './App.css';\nimport InstructorApp from './component/InstructorApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <InstructorApp />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}